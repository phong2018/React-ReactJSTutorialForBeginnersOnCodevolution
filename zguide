------
* Extension 
- Simple React Snippets
- ES7 React/Redux/GraphQL/React-Native snippets
- Prettier - Code formatter
-------
* Hot Key
shift+alt+F: format code
rfce
rpce
rec
rconst
--------
$32: useCounter Custom Hook
--------
$31: useDocumentTitle Custom Hook
create hook useDocumentTitle.js and use in DocTitleOne, DocTitleTwo
--------
$30: Hook so far
useState
useEffect
useContext
useReducer
useCallback
useMemo
useRef
--------
$29: useRef Hook (p2)
--------
$28: useRef Hook (p1)
--------
$27: useMemo Hook
every state update, the component render
-> issue: component render counterTwo slowly causing of function isEvent, althougth buttonTwo dont change.
-> solve: useMemo
=isEvent() => call function
=isEvent => function variable
--------
$26: useCallback Hook
- all component re-render
- use React.memno to solve, but dont solve with function, function till re-render. Because a new increment salary function is create, each time the parent component renders, and when dealing with function we alway have to consider reference equality, even though two functions have the exact same behavior, it does  not mean they are equal to each other. the function before rerender is different to the function after rerender
-> useCallback to solve
--------
$25: useState vs useReducer
- scenarios                 useSate             useReducer
+ typeofData                Number,string,Bool  Object,Array
+ numberOfStateTransition   one,two             too many
+ business logic            no                  complex logic
+ local,global              local               global
--------
$24: Fetching data with useReducer (p2)
/FetchingDataWithUseReducer
useReducer,useEffect 
--------
$23: Fetching data with useReducer (p1)
/FetchingDataWithUseReducer
useState, useEffect
--------
$22: UseReducer & useContext
- useReducer- local state management
- useContext- share state between components global state manggement
-> useReducer + useContext

ReducerContext
ComponentAA,ComponentBB,ComponentCC,ComponentDD,ComponentEE,ComponentFF
--------
$21: Multiple UseReducer 
--------
$20: UseReducer (complex state & action)
--------
$19: UseReducer (simple state & action)
--------
$18: UseReducer Hook (p3)
is a hook that used for state management
- useState: state
- useEffect: side effects
- useContext: context API
- UseReducer: reducers
--------
$17: UseContext Hook (p3)
HOOK/componentE: useContext Hook 
--------
$16: UseContext Hook (p2)
use normal Context
--------
$15: UseContext Hook (p1)
--------
$14: React Hook - Fetching data with useEffect (p3)
add button, fetching onlick button 
--------
$13: React Hook - Fetching data with useEffect (p2)
fectching One Post
--------
$12: React Hook - Fetching data with useEffect (p1)
--------
$11: React Hook - useEffect with incorrect dependency array (second parameter)
- so whenever you try to specify an empty denpendency list. please make sure if you really dont have any.
--------
$10: React Hook - useEffect with cleanup
like call componentWillUnmount()
in call useEffect have to:
call  return () => {
        console.log("Component Unmouting code");
        window.removeEventListener("mousemove", logMousePosition);
    };
--------
$9: React Hook - run effect only one
the second parameter set [] not denpent any parameter
->like only have componentDidMount
--------
$8: React Hook - conditionally run effects 
the second parameter is change is conditon to run effects
if the value dont change between render  the useEffect not Run
->like componentDidUpdate have conditionally
--------
$7: React Hook - useEffect 
useEffect ruen every component render 
dont have second parameter
->like call componentDidMount & componentDidUpdate
--------
$6: React Hook - useEffect Introduction
like call componentDidMount & componentDidUpdate
--------
$5: React Hook - useState with array
--------
$4: React Hook - useState with object
--------
$3: React Hook - useState with previous state
--------
$2: React Hook - useSate
--------
$1: React Hook - Introduction
- allow you to use react feature without having to write class. ex: State of a component
- Hooks don't work inside class
* Why Hook
- understand how This keywork works in Javascript
- remember to bind event handlers in class component
- class don't minify very well and make hot reloading very unreliable
- there is no particular way to reuse statefull component logic- HOC and render props pattern do address this problem-> there is need a to share statefull logic in a better way.
- Create component for complex scenarios such as data fetching and subscribing to events. Reated code is not organized in one place. Ex: Data fectching in componentDidMount & compoentDidUpdate; Event listeners in componentDidMount & componentWillUnmount. 
- Because of stateful logic - cannot break component into smaller ones.
- Hooks dont contain any breaking changes and the release is 100% backwards-compatible
- hook dont replace your existing knowledge of React concepts
- instead hook provide a more direct API to the react concepts you already know
========================

$43: HTTP POST request
--------
$42: HTTP GET request
https://jsonplaceholder.typicode.com/
--------
$41: http and React
install: npm install axios
--------
$40: React Context (p3)
- add default value for React.createContext(...)
- ContextType to consume value 
+ only work with class component
+ suscribe single context
--------
$39: React Context (p2)
1. create the Context
2. provide a context value
3. consume the context value
--------
$38: React Context (p1)
Context provides a way to pass data through the component tree without having to pass props down manually at every level
--------
$37: Render Props (p2)
the term 'render prop' refers to a technique for sharing code between React component using a prop whose value is a function
--------
$36: Render Props (p1)
- to share common functionality between components
--------
$35: Higher Order Component(p3)
- passing down the props: {... this.props}
- tranfer parameter for HOC
--------
$34: Higher Order Component(p2)
- to share common functionality between components
- a pattern where a function take a component as an argument and returns a news component
- ex: const NewComponent =higherOrderComponent(originalComponent)
--------
$33: Higher Order Component(HOC)(p1)
--------
$32: Error Boudary
- are react Component that catch Javascript error in their child component tree, log these errors, and display a fall-back UI
- a class component becomes an error boundary by defining either or both of getDirivedStateFromError and componentDidCatch lifecycle method
-catch error in 
+ static getDirivedStateFromError(error)
+ componentDidCatch(error,info)

--------
$31: Portals 
- provide a way to render children into a DOM node thats exist outside the DOM hierachi of parent component. 
- we had one DOM element in our HTML that we were mouting the react application into.
- you can render a component onto a DOM node that is not under this root element
--------
$30: Forwading Refs: a technique to automatically passing a ref through a component to one of its childen
- use for function component
--------
$29: Refs with class Component
- to attach Refs to DOM element and classCompoent in React
- have to use for Class Component
- Special circumstances if at all you need a ref to a child component from a parent component
-------- 
$28: Refs: to access DOM node directly within react.

--------
$27: Memo: like PureComponent but use for function
--------
$26: PureComponent
- if there is no different, the component is not re-render. 
- A pure component on the orther hand implement shouldComponentUpdate with a shallow props and state comparison
- shallow comparison
+ primative Types: return true if: same value && type
+ complex type: return true if: reference the exact same object
ex: 
var a=[1,2];
var b=[1,2];
var c=a;
=> a===b //false
=> a===c //true (same object)
--------
$25: Fragments
--------
$24: Updating lifecycle method
- static getDirivedStateFromProps: called every time a component is rendered
- shouldComponentUpdate(nextProps,nextState): 
- render
- getSnapshotBeforeUpdate(preProps,preState): called right before the changes from the virtual DOM are are to be reflected in the DOM
- componentDidUpdate(preProps,preState,snapshot): called after the render is finished in the re-render cycles
--------
$23:Component Mouting lifecycle methods
+ constructor: 
+ static getDirivedStateFromProps
+ render: 
+ componentDidMount: interact with the DOM, ajax calls to load data
--------
$22: component lifecycle Method
- mouting: when an instance of a component is being created and inserted into the DOM: (4) constructor, static getDirivedStateFromProps, render, componentDidMount
- upateting: when a component is being re-rendered as a result of changes to either its props or state: (5) static getDirivedStateFromProps, shouldComponentUpdate, render, getSnapshotBeforeUpdate, compoentDidUpdate
- unmouting: (1) when a component is being removed from the DOM: componentWillUnmount
- error handling: when there is an error during rendering, in a lifecycle method, or in the constructor of any child component: (2) static getDirivedStateFromError, componentDidCatch.
--------
$21: Controlled component
--------
$20: Styling React component
- css stylesheets
- inline Styling
- css modules
- css in js libaries (styled compenents)
--------
$19: Index as key anti-pattern 
--------
$17: List rendering
- when update will re-render childs 
+ react is going to compare pre-Key & curr-Key if there different will re-render. If no, NOT re-render.
-> avoid use index in .map() to use key for list childs
--------
$16: Condition rendering
UserGreeting.js
--------
$15: Method as props
--------
$14: Binding event handler
- different: function and function call
+ function is variable
+ function call is implement function
- arrow function is functon (is variable)
--------
$11: setState
- setState(updater, [callback])
--------
$08: JSX
- React.createElement(component, props, ...children)
